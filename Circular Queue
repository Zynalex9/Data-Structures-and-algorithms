class CircularQueue:
    def __init__(self, max_size):
        self.max_size = max_size
        self.queue = [None] * max_size
        self.front = self.rear = -1

    def is_empty(self):
        return self.front == -1

    def is_full(self):
        return (self.rear + 1) % self.max_size == self.front

    def enqueue(self, item):
        if not self.is_full():
            if self.is_empty():
                self.front = self.rear = 0
            else:
                self.rear = (self.rear + 1) % self.max_size
            self.queue[self.rear] = item
            print(f"Enqueued: {item}")
        else:
            print("Queue is full, cannot enqueue.")

    def dequeue(self):
        if not self.is_empty():
            removed_item = self.queue[self.front]
            if self.front == self.rear:
                self.front = self.rear = -1
            else:
                self.front = (self.front + 1) % self.max_size
            print(f"Dequeued: {removed_item}")
            return removed_item
        else:
            print("Queue is empty, cannot dequeue.")

    def size(self):
        if self.is_empty():
            return 0
        elif self.is_full():
            return self.max_size
        elif self.front <= self.rear:
            return self.rear - self.front + 1
        else:
            return self.max_size - (self.front - self.rear - 1)
cq = CircularQueue(5)

cq.enqueue(1)
cq.enqueue(2)
cq.enqueue(3)

print("Size:", cq.size())  

print("Dequeue:", cq.dequeue())

cq.enqueue(4)
cq.enqueue(5)

print("Is Empty:", cq.is_empty())  
print("Is Full:", cq.is_full())    

print("Size:", cq.size())  
